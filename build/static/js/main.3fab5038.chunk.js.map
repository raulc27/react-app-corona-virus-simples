{"version":3,"sources":["components/corona.js","components/NavBar.js","App.js","services/api.js","components/Pais.js","routes.js","serviceWorker.js","index.js"],"names":["Corona","coronas","sort","a","b","cases","class","map","corona","to","country","src","countryInfo","flag","width","deaths","recovered","Intl","NumberFormat","style","format","todayCases","todayDeaths","critical","NavBar","Navbar","bg","variant","Brand","href","Nav","NavDropdown","title","id","Item","target","Divider","className","App","state","fetch","then","res","json","data","setState","catch","console","log","this","Component","api","axios","create","baseURL","Pais","Mundo","props","match","params","get","responsePais","responseMundo","active","Routes","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3fab5038.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\n\n\nconst Corona = ({coronas})=>{\n\n  coronas = coronas.sort(\n\n    function(a,b)\n    {\n        return b.cases-a.cases;\n    }\n\n  )\n\n    return(\n\n              <div >\n            <center><h1>Casos COVID-19 no Mundo</h1>\n            <p>clique na bandeira do país para algumas informações</p>\n            </center>\n          \n            <div class=\"container\">\n               \n                <table class=\"table table-striped table-hover table-responsive-xs table-sm table-wrapper-scroll-y\">\n                <thead>\n                    <tr>\n                        <th>Bandeira</th>\n                        <th >País</th>\n                        <th >Diagnosticados</th>\n                        <th >Mortes</th>\n                        <th >Recuperados</th>\n                        <th>Letalidade</th>\n                        <th>Recuperação</th>\n                        <th >Diag. hoje</th>\n                        <th >Mortes últimas 24h</th>\n                        <th >Estado crítico</th>                   \n                    </tr>\n                </thead>\n                <tbody>\n\n            {coronas\n                .map((corona)=>(\n                  \n\n                            <tr>  \n                                <td><Link to={`/covid19/Pais/${corona.country}`} ><img src={corona.countryInfo.flag} class=\"image img-responsive img-rounded img-thumbnail\" width=\"33%\" /></Link></td>\n                                <td ><b>{corona.country}</b></td>\n                                <td>{corona.cases}</td>\n                                <td>{corona.deaths}</td>\n                                <td>{corona.recovered}</td>\n                                <td>{Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(corona.deaths/corona.cases)}</td>\n                                <td>{Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(corona.recovered/corona.cases)}</td>\n                                <td>{corona.todayCases}</td>\n                                <td >{corona.todayDeaths}</td>\n                                <td>{corona.critical}</td>\n                               \n                                \n                            </tr>\n\n                  \n\n\n             \n                ))}\n                </tbody>\n\n                <tfoot>\n                    <tr>\n                        \n                        <th>Bandeira</th>\n                        <th >País</th>\n                        <th >Diagnosticados</th>\n                        <th >Mortes</th>\n                        <th >Recuperados</th>\n                        <th>Letalidade</th>\n                        <th>Recuperação</th>\n                        <th >Diag. hoje</th>\n                        <th >Mortes últimas 24h</th>\n                        <th >Estado crítico</th>\n                      \n\n\n\n                    </tr>\n                </tfoot>\n          </table>\n        </div>\n              \n        </div>\n    )\n}\n\nexport default Corona;\n\n\n/*\n\n\n\n   <div class=\"card col-sm-4 col-xs-4 mb-3\"  >\n                    <div class=\"card-body\">\n                        <img src={corona.countryInfo.flag} class=\"card-img-top\"/>\n                        <h5 class=\"card-title\" align=\"center\">{corona.country}</h5>\n                        <h6 class=\"card-subtitle mb-2 text-muted\"></h6>\n                        <p class=\"card-text\">Total Contaminados: {corona.cases}</p>\n                        <p class=\"card-text\">Total Mortes: {corona.deaths}</p>\n                        <p class=\"card-text\">Total Recuperados: {corona.recovered}</p>\n                        \n                        <p class=\"card-text\">Casos Hoje: {corona.todayCases}</p>\n                        <p class=\"card-text\">Mortes Hoje: {corona.todayDeaths}</p>\n                        <p class=\"card-text\">Em estado crítico: {corona.critical}</p>\n\n                    </div>\n\n                    </div>\n                    */\n\n\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Navbar, Form, FormControl, Nav, Button} from 'react-bootstrap';\nimport NavDropdown from 'react-bootstrap/NavDropdown'\n\nconst NavBar = () => {\n  return (\n\n    <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"http://raulcastro.com.br\">RaulCastro</Navbar.Brand>\n\n    <Nav>\n    <NavDropdown title=\"Links Úteis sobre COVID-19\" id=\"collasible-nav-dropdown\" >\n        <NavDropdown.Item href=\"https://www.bing.com/covid\" target=\"_blank\">Rastreador Bing</NavDropdown.Item>\n        <NavDropdown.Item href=\"https://experience.arcgis.com/experience/38efc69787a346959c931568bd9e2cc4\"  target=\"_blank\">Casos por Bairro/Rio de Janeiro</NavDropdown.Item>\n        <NavDropdown.Item href=\"https://www.worldometers.info/coronavirus/\"  target=\"_blank\">WorldOMeters</NavDropdown.Item>\n        <NavDropdown.Divider />\n        <NavDropdown.Item href=\"http://covid19br.org/\"  target=\"_blank\">Painel UFBA</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n\n    <Nav className=\"mr-auto\">\n      <NavDropdown title=\"Contato\" id=\"collasible-nav-dropdown\" >\n      <NavDropdown.Item  href=\"https://github.com/raulc27/react-app-corona-virus-simples\" target=\"_blank\">GitHub desta App</NavDropdown.Item>\n         <NavDropdown.Divider />\n         <NavDropdown.Item href=\"http://linkedin.com/in/raulc27\" target=\"_blank\">meu LinkedIn</NavDropdown.Item>\n      </NavDropdown>\n     </Nav>\n\n    <Nav>\n    \n    </Nav>\n   \n \n  </Navbar>\n  \n\n\n\n\n  );\n};\n\n\nexport default NavBar;","import React, {Component} from 'react';\nimport Corona from './components/corona';\nimport NavBar from './components/NavBar';\n\n\nimport \"./buttonStyles.css\";\n\nclass App extends Component{\n\n  state={\n      coronas:[]\n  }\n\n  componentDidMount(){\n    fetch('https://corona.lmao.ninja/v2/countries')\n    .then(res=>res.json())\n    .then((data)=>{\n      this.setState({coronas:data})\n    })\n    .catch(console.log)\n  }\n\n\n\n  render(){\n    return(\n      //jsx..\n      <div>\n      <NavBar />\n      <Corona coronas={this.state.coronas} />\n     \n    \n\n\n      </div>\n    );\n  }\n}\n\nexport default App;","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://corona.lmao.ninja'\n});\n\n\nexport default api;\n","import React,{Component} from 'react';\nimport api from '../services/api';\n\nexport default class Pais extends Component {\n\n\n    state={\n        Pais:[],\n        Mundo:{}\n    }\n\n    async componentDidMount(){\n\n\n        const {id}=this.props.match.params;\n\n        const responsePais = await api.get(`/v2/countries/${id}`);\n        const responseMundo = await api.get('/v2/all');\n\n        //console.log(responsePais.data);\n\n        this.setState({Pais: responsePais.data});\n        this.setState({Mundo: responseMundo.data});\n\n       \n\n    }\n\n\n\n    render(){\n\n        const {Pais, Mundo}=this.state;\n\n       \n        return(\n         \n         \n        \n          <>\n          \n          <div class=\"jumbotron jumbotron-fluid\" >\n              <div class=\"container\">\n                \n                <h1 class=\"display-4\">Informações de \"{Pais.country}\" </h1>\n                <p class=\"lead\">Comparando dados COVID-19 de \"{Pais.country}\" com o mundo.</p>\n                <p>Esta <b>app</b> consulta uma api, e muitos dados estão em formato internacional.</p>\n              </div>\n          </div>\n            \n\n          <div class=\"container\">\n\n          <div class=\"card-deck\">\n              <div class=\"card\">\n              {/*<img class=\"card-img-top\" src='' alt='Dados Mundiais' /> */}\n                <div class=\"card-body\">\n                  <h5 class=\"card-title\">{Pais.country}</h5>\n                  <p class=\"card-text\"></p>\n                \n                  <ul class=\"list-group list-group-flush\">\n                  <li class=\"list-group-item\"></li>\n                  <li class=\"list-group-item\"><b>Diagnosticados:</b> {Pais.cases}</li>\n                  <li class=\"list-group-item\"><b>Mortes:</b> {Pais.deaths}</li>\n                  <li class=\"list-group-item\"><b>Recuperados:</b> {Pais.recovered}</li>\n                  <li class=\"list-group-item\"><b>Infectados no momento:</b> {Pais.active}</li>\n                  <li class=\"list-group-item\"><b>Estado Crítico:</b> {Pais.critical}</li>\n              </ul>\n                  \n                  <p class=\"card-text\"><small class=\"text-muted\">Update de 10 em 10min</small></p>\n                </div>\n            \n            </div>\n\n            <div class=\"card\" >\n            {/* <img class=\"card-img-top\" src='' alt='Dados Mundiais' /> */}\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">Mundo</h5>\n              <p class=\"card-text\">\n              </p>\n              <p class=\"card-text\"></p>\n                         \n              <ul class=\"list-group list-group-flush\">\n                <li class=\"list-group-item\"></li>\n                <li class=\"list-group-item\"><b>Diagnosticados:</b> {Mundo.cases}</li>\n                <li class=\"list-group-item\"><b>Mortes:</b> {Mundo.deaths}</li>\n                <li class=\"list-group-item\"><b>Recuperados:</b> {Mundo.recovered}</li>\n                <li class=\"list-group-item\"><b>Infectados no Momento:</b> {Mundo.active}</li>\n                <li class=\"list-group-item\"><b>Estado Cŕitico:</b> {Mundo.critical}</li>\n            </ul>\n\n\n\n              <p class=\"card-text\"><small class=\"text-muted\">Update de 10 em 10min</small></p>\n            </div>\n        \n        </div>\n\n\n\n\n        <div class=\"card\" >\n        {/* <img class=\"card-img-top\" src='' alt='Dados Mundiais' /> */}\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">\"{Pais.country}\" em relação ao Mundo</h5>\n          <p class=\"card-text\">\n          </p>\n          <p class=\"card-text\"></p>\n                     \n          <ul class=\"list-group list-group-flush\">\n            <li class=\"list-group-item\"></li>\n            <li class=\"list-group-item\"><b>Diagnosticados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.cases/Mundo.cases)}</li>\n            <li class=\"list-group-item\"><b>Mortes:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.deaths/Mundo.deaths)}</li>\n            <li class=\"list-group-item\"><b>Recuperados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.recovered/Mundo.recovered)}</li>\n            <li class=\"list-group-item\"><b>Infectados no Momento:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.active/Mundo.active)}</li>\n            <li class=\"list-group-item\"><b>Estado Cŕitico:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.critical/Mundo.critical)}</li>\n        </ul>\n\n\n\n          <p class=\"card-text\"><small class=\"text-muted\">Update de 10 em 10min</small></p>\n        </div>\n    \n    </div>\n\n\n\n\n          </div>\n          \n           \n\n          \n\n\n       \n          </div>\n\n\n          </>\n\n\n\n          \n\n         \n          \n   \n         \n        );\n\n    }\n\n\n\n\n}\n\n","import React from 'react';\nimport {BrowserRouter,Switch,Route} from 'react-router-dom';\n\nimport App from './App';\nimport Pais from './components/Pais';\n\n\n/*\n\nstaeless... eheheheh (rauL)\n\n*/\n\nconst Routes = () => (\n\n    <BrowserRouter>\n        <Switch>\n        \n            <Route exact path=\"/covid19\" component={App} />\n            <Route path=\"/covid19/Pais/:id\" component={Pais} />\n\n        </Switch>\n    </BrowserRouter>\n\n);\n\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\n{/*\n\n\n    ReactDOM.render(<App />, document.getElementById('root'));\n\n\n*/}\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}