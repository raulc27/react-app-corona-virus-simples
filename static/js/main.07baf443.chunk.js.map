{"version":3,"sources":["components/corona.js","components/NavBar.js","App.js","services/api.js","components/Pais.js","components/tab.js","components/Tabela.js","routes.js","serviceWorker.js","index.js"],"names":["Corona","coronas","sort","a","b","cases","to","class","map","corona","style","width","country","src","countryInfo","flag","Intl","NumberFormat","format","active","deaths","recovered","tests","todayDeaths","NavBar","Navbar","bg","variant","Brand","href","Nav","NavDropdown","title","id","Item","target","Divider","className","App","state","fetch","then","res","json","data","setState","catch","console","log","this","Component","api","axios","create","baseURL","Pais","Mundo","props","match","params","get","responsePais","responseMundo","critical","tab","dataAtual","Date","horas","getHours","minutos","getMinutes","dia","getDate","mes","getMonth","ano","getFullYear","Tabela","response","Routes","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.07baf443.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {Card, Container} from 'react-bootstrap';\n\n\nconst Corona = ({coronas})=>{\n\n  coronas = coronas.sort(\n\n    function(a,b)\n    {\n        return b.cases-a.cases;\n    }\n\n  )\n\n\n  return(\n            <>\n              <div >\n            <center><h1>Casos COVID-19 no Mundo</h1>\n            <p>clique na bandeira do país para um resumo</p>\n            <p>Para visualizar por óbitos, <Link to={`/Tabela`} > clique aqui</Link></p>\n            </center>\n          \n            <div class=\"container\">\n            <center>\n            <div class=\"card-rows \"  >\n\n               \n              \n\n            {coronas\n                .map((corona)=>(\n                                     \n                   \n                    <div class=\"card mb-5\" style={{width:'21em'}} >\n \n                    <Link to={`/Pais/${corona.country}`} > <img src={corona.countryInfo.flag} class=\"card-img-top img-fluid\" />  </Link>\n                    \n                    <div class=\"card-header\">\n                    <h3 class=\"card-title\">{corona.country}</h3>\n                        <p class=\"card-text\"></p>\n                      </div>\n\n\n                        <div class=\"card-body\"  >\n                       \n                       \n                            <ul class=\"list-group list-group-flush\">\n                            <li class=\"list-group-item\"><b>Total Diagnosticados: </b>{Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(corona.cases)}</li>\n                            <li class=\"list-group-item\"><b>Infectados agora: </b>{Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(corona.active)}</li>\n                            <li class=\"list-group-item\"><b>Taxa Letalidade: </b>{Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(corona.deaths/corona.cases)}</li>\n                            <li class=\"list-group-item\"><b>Taxa Recuperação: </b>{Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(corona.recovered/corona.cases)}</li>\n                            <li class=\"list-group-item\"><b>Qtde testes realizados: </b>{Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(corona.tests)}</li>\n                            <li class=\"list-group-item\"><b>Mortes hoje: </b>{Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(corona.todayDeaths)}</li>\n                            </ul>\n\n                        </div>\n\n                        <div class=\"card-footer\">\n                        <small class=\"text-muted\">Atualização de 10 em 10 minutos</small>\n                      </div>\n                    \n                              {/*}\n                                \n                                {corona.deaths}\n                                {corona.recovered}\n                                \n                                \n                                {corona.todayCases}\n                                {corona.todayDeaths}\n                                {corona.critical}\n                                  \n                */}     \n                       </div>\n                ))}\n\n                </div>\n                </center>\n                </div>\n                \n                </div>\n               \n              \n                \n              \n                \n            </>                \n                \n           \n    )\n}\n\nexport default Corona;\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Navbar, Container, Form, FormControl, Nav, Button} from 'react-bootstrap';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst NavBar = () => {\n  return (\n\n\n    <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"http://raulcastro.com.br\">RaulCastro</Navbar.Brand>\n\n    <Nav>\n    <NavDropdown title=\"Links Úteis sobre COVID-19\" id=\"collasible-nav-dropdown\" >\n        <NavDropdown.Item href=\"https://www.bing.com/covid\" target=\"_blank\">Rastreador Bing</NavDropdown.Item>\n        <NavDropdown.Item href=\"https://experience.arcgis.com/experience/38efc69787a346959c931568bd9e2cc4\"  target=\"_blank\">Casos por Bairro/Rio de Janeiro</NavDropdown.Item>\n        <NavDropdown.Item href=\"https://www.worldometers.info/coronavirus/\"  target=\"_blank\">WorldOMeters</NavDropdown.Item>\n        <NavDropdown.Divider />\n        <NavDropdown.Item href=\"http://covid19br.org/\"  target=\"_blank\">Painel UFBA</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n\n    <Nav className=\"mr-auto\">\n      <NavDropdown title=\"Contato\" id=\"collasible-nav-dropdown\" >\n      <NavDropdown.Item  href=\"https://github.com/raulc27/react-app-corona-virus-simples\" target=\"_blank\">GitHub desta App</NavDropdown.Item>\n         <NavDropdown.Divider />\n         <NavDropdown.Item href=\"http://linkedin.com/in/raulc27\" target=\"_blank\">meu LinkedIn</NavDropdown.Item>\n      <NavDropdown.Divider />\n\n      <NavDropdown.Item href=\"http://rankingcovid19.herokuapp.com\" target=\"_blank\" >rankingcovid19 no Heroku</NavDropdown.Item>\n      </NavDropdown>\n     </Nav>\n\n    <Nav>\n          \n    </Nav>\n   \n \n  </Navbar>\n  \n\n\n\n\n  );\n};\n\n\nexport default NavBar;","import React, {Component} from 'react';\nimport Corona from './components/corona';\nimport NavBar from './components/NavBar';\n\n\nimport \"./buttonStyles.css\";\n\nclass App extends Component{\n\n  state={\n      coronas:[]\n  }\n\n  componentDidMount(){\n    fetch('https://corona.lmao.ninja/v2/countries')\n    .then(res=>res.json())\n    .then((data)=>{\n      this.setState({coronas:data})\n    })\n    .catch(console.log)\n  }\n\n\n\n  render(){\n    return(\n      //jsx..\n      <div>\n      <NavBar />\n      <Corona coronas={this.state.coronas} />\n     \n    \n\n\n      </div>\n    );\n  }\n}\n\nexport default App;","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://corona.lmao.ninja'\n});\n\n\nexport default api;\n","import React,{Component} from 'react';\nimport api from '../services/api';\nimport Link from 'react-router-dom';\n\nexport default class Pais extends Component {\n\n// state \"gambiarra\"!!!!\n    state={\n        Pais:{\n\n              \"countryInfo\": {\n                \"_id\":\"\",\n                \"iso2\":\"\",\n                \"iso3\":\"\",\n                \"lat\": \"\",\n                \"long\":\"\",\n                \"flag\":\"\" \n              }\n   \n        \n        }\n        \n        ,     \n        \n        Mundo:{}\n    }\n\n    async componentDidMount(){\n\n\n        const {id}=this.props.match.params;\n\n        const responsePais = await api.get(`/v2/countries/${id}`);\n        const responseMundo = await api.get('/v2/all');\n\n        //console.log(responsePais.data);\n\n        this.setState({Pais: responsePais.data});\n        this.setState({Mundo: responseMundo.data});\n\n        \n\n        \n     \n\n    }\n  \n\n\n    render(){\n\n        const {Pais, Mundo}=this.state;\n        //if(!Pais) return null;\n        //if(!Mundo) return null;\n\n\n       \n\n        return(\n         \n         \n        \n          <>\n          \n          <div class=\"jumbotron jumbotron-fluid\" >\n              <div class=\"container\">\n                \n                <h1 class=\"display-4\"><b>\"{Pais.country}\"</b> </h1>\n                <img src={Pais.countryInfo.flag} class=\"img img-fluid\"  />\n                <p class=\"lead mt-3\">Comparando dados <b>COVID-19</b> de <b>\"{Pais.country}\"</b> com o mundo.</p>\n                <p>Esta <b>app</b> consulta uma api e muitos dados estão em formato internacional.</p>\n                <p class=\"d-sm-none\">Para uma comparação detalhada, consulte em uma tela desktop</p>\n                <p class=\"small mt-5 ml-5\">Desenvolvimento: Raul Castro. <a href=\"https://linkedin.com/in/raulc27\">@raulc27 (LinkedIn)</a></p>\n              </div>\n          </div>\n            \n\n          <div class=\"container\">\n\n          <div class=\"card-deck\">\n\n              <div class=\"card d-none d-sm-block bg-light\">\n              {/*  <img class=\"card-img-top\" src={Pais.countryInfo.flag} alt='Dados Mundiais' /> */}\n              <div class=\"card-header\">\n                    <h5 class=\"card-title\">{Pais.country}</h5>\n                    <p class=\"card-text\"></p>\n                  </div>\n          \n          \n                <div class=\"card-body\">\n                \n                  <ul class=\"list-group list-group-flush\">\n                  <li class=\"list-group-item\"></li>\n                  <li class=\"list-group-item\"><b>Diagnosticados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Pais.cases)}</li>\n                  <li class=\"list-group-item\"><b>Mortes:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Pais.deaths)}</li>\n                  <li class=\"list-group-item\"><b>Recuperados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Pais.recovered)}</li>\n                  <li class=\"list-group-item\"><b>Infectados no momento:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Pais.active)}</li>\n                  <li class=\"list-group-item\"><b>Estado Crítico:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Pais.critical)}</li>\n              </ul>\n              \n                  <p class=\"card-text\"><small class=\"text-muted\">Update de 10 em 10min</small></p>\n                </div>\n            \n            </div>\n\n            <div class=\"card d-none d-sm-block bg-light\" >\n            {/* <img class=\"card-img-top\" src='' alt='Dados Mundiais' /> */}\n\n            <div class=\"card-header\">            \n                <h5 class=\"card-title\">Mundo</h5>\n                <p class=\"card-text\"></p>\n              </div>\n\n            <div class=\"card-body\">\n                     \n\n                         \n              <ul class=\"list-group list-group-flush\">\n                <li class=\"list-group-item\"></li>\n                <li class=\"list-group-item\"><b>Diagnosticados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Mundo.cases)}</li>\n                <li class=\"list-group-item\"><b>Mortes:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Mundo.deaths)}</li>\n                <li class=\"list-group-item\"><b>Recuperados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Mundo.recovered)}</li>\n                <li class=\"list-group-item\"><b>Infectados no Momento:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Mundo.active)}</li>\n                <li class=\"list-group-item\"><b>Estado Cŕitico:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Mundo.critical)}</li>\n            </ul>\n\n\n\n              <p class=\"card-text\"><small class=\"text-muted\">Update de 10 em 10min</small></p>\n            </div>\n        \n        </div>\n\n\n\n\n        <div class=\"card bg-light\" >\n        {/* <img class=\"card-img-top\" src='' alt='Dados Mundiais' /> */}\n        \n        <div class=\"card-header\">\n            <h5 class=\"card-title\">\"{Pais.country}\" em relação ao Mundo</h5>\n            <p class=\"card-text\"></p>\n          </div>\n          \n\n        <div class=\"card-body\">\n\n          \n                     \n          <ul class=\"list-group list-group-flush\">\n            <li class=\"list-group-item\"></li>\n            <li class=\"list-group-item\"><b>Diagnosticados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.cases/Mundo.cases)}</li>\n            <li class=\"list-group-item\"><b>Mortes:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.deaths/Mundo.deaths)}</li>\n            <li class=\"list-group-item\"><b>Recuperados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.recovered/Mundo.recovered)}</li>\n            <li class=\"list-group-item\"><b>Infectados no Momento:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.active/Mundo.active)}</li>\n            <li class=\"list-group-item\"><b>Estado Cŕitico:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.critical/Mundo.critical)}</li>\n        </ul>\n\n\n\n          <p class=\"card-text\"><small class=\"text-muted\">Update de 10 em 10min</small></p>\n        </div>\n    \n    </div>\n\n            \n\n          </div>\n          \n           \n          <a href=\"/react-app-corona-virus-simples\" class=\"btn btn-dark input-lg mt-5 mb-1\"><b>Voltar para página inicial</b></a>\n\n          \n\n\n       \n          </div>\n\n          \n\n          </>\n\n\n\n          \n\n         \n          \n   \n         \n        );\n\n    }\n\n\n\n\n}\n\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\n\n\nconst tab = ({coronas})=>{ \n    \n    \n    coronas = coronas.sort(\n        function(a,b){\n            return b.todayDeaths-a.todayDeaths;\n        }\n    )\n\n\n    const dataAtual = new Date();\n    const horas = dataAtual.getHours();\n    const minutos = dataAtual.getMinutes();\n\n      const dia = dataAtual.getDate();\n    const mes = dataAtual.getMonth()+1;\n    const ano = dataAtual.getFullYear();\n\n    //const horaCerta=horas+\"h\"+minutos;\n\n\n\n    return(\n\n        <div >\n      <center><h1>Óbitos por COVID-19</h1>\n      <p>Ordenando por fatos ocorridos desde 00h de hoje <b>({dia+\" / \"+mes+\" / \"+ano})</b></p>\n    \n    <p class=\"small\">O seu horário no momento: <b>{horas}h</b> e {minutos} minutos </p>\n       \n    \n      <p>clique no nome do país para um resumo</p>\n      </center>\n    \n      <div class=\"container-fluid\">\n         \n          <table class=\"table   table-striped table-hover table-responsive-xs table-sm table-wrapper-scroll-y\">\n          <thead>\n              <tr>\n                 {/*  <th>Bandeira</th> */}\n                 <th  >País</th> \n                 <th  >Óbitos hoje</th> \n\n\n                  <th >Diagnosticados</th>\n                  {/*      <th  >Mortes</th> */}\n                  {/*   <th  >Recuperados</th> */}\n                  <th>Letalidade</th>\n                  <th>Recuperação</th>\n                  {/*    <th  >Diag. hoje</th> */}\n                  {/*   <th  >Estado crítico</th>       */}            \n              </tr>\n          </thead>\n\n          <tbody>\n\n      {coronas\n          .map((corona)=>(\n            \n              \n                      <tr>  \n                    {/*}      <td><Link to={`/Pais/${corona.country}`} ><img src={corona.countryInfo.flag} class=\"image img-responsive img-rounded img-thumbnail\" width=\"33%\" /></Link></td> */}\n                          <td  ><Link to={`/Pais/${corona.country}`} ><b>{corona.country}</b></Link></td> \n                          <td  >{corona.todayDeaths}</td> \n\n                          <td >{Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(corona.cases)}</td>\n                     {/*     <td  >{corona.deaths}</td> */}\n                     {/*     <td  >{corona.recovered}</td> */}\n                          <td>{Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(corona.deaths/corona.cases)}</td>\n                          <td>{Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(corona.recovered/corona.cases)}</td>\n                     {/*     <td  >{corona.todayCases}</td> */}\n                      {/*    <td  >{corona.critical}</td> */}\n                         \n                          \n                      </tr>\n\n            \n\n\n       \n          ))}\n          </tbody>\n\n          <tfoot>\n              <tr>\n                  \n                 {/*} <th>Bandeira</th> */}\n                  <th  >País</th> \n                  <th  >Mortes últimas 24h</th> \n\n                  <th >Diagnosticados</th>\n               {/*   <th  >Mortes</th> */}\n               {/*   <th  >Recuperados</th> */}\n                  <th>Letalidade</th>\n                  <th>Recuperação</th>\n                {/* <th  >Diag. hoje</th> */}\n                {/*  <th  >Estado crítico</th> */}\n                \n\n\n\n              </tr>\n          </tfoot>\n    </table>\n  </div>\n        \n  </div>\n\n    )\n\n}\n\nexport default tab;\n\n","import React,{Component} from 'react';\nimport api from '../services/api';\nimport Tab from './tab';\n\n\n\n\nimport \"../buttonStyles.css\";\n\nclass Tabela extends Component{\n\n  state={\n    coronas:[]\n  }\n  \n/*\n\n  componentDidMount(){\n    fetch('https://corona.lmao.ninja/v2/countries')\n    .then(res=>res.json())\n    .then((data)=>{\n      this.setState({coronas:data})\n    })\n    .catch(console.log)\n  }\n*/\n\nasync componentDidMount(){\n\n\tconst response = await api.get('/v2/countries');\n\n\tthis.setState({coronas: response.data});\n\n}\n\n\n  render(){\n    return(\n      //jsx..\n      \n\t  <div>\n     \n      <Tab coronas={this.state.coronas} />\n\t  </div>\n\t\t\n\n\n     \n    );\n  }\n}\n\nexport default Tabela;","import React from 'react';\nimport {BrowserRouter,Switch,Route} from 'react-router-dom';\n\nimport App from './App';\nimport Pais from './components/Pais';\nimport Tabela from './components/Tabela';\n\n/*\n\nstaeless... eheheheh (rauL)\n\n*/\n\nconst Routes = () => (\n\n    <BrowserRouter basename=\"react-app-corona-virus-simples\"  >\n        <Switch>\n        \n            <Route exact path=\"/\" component={App} />\n            <Route path=\"/Pais/:id\" component={Pais} />\n            <Route path=\"/Tabela\" component={Tabela} />\n        </Switch>\n    </BrowserRouter>\n\n);\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\n{/*\n\n\n    ReactDOM.render(<App />, document.getElementById('root'));\n\n\n*/}\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}