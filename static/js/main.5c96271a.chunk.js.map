{"version":3,"sources":["components/corona.js","components/NavBar.js","App.js","services/api.js","components/Pais.js","components/tab.js","components/Tabela.js","routes.js","serviceWorker.js","index.js"],"names":["Corona","coronas","sort","a","b","cases","class","to","map","corona","country","src","countryInfo","flag","Intl","NumberFormat","style","format","active","todayDeaths","tests","NavBar","Navbar","bg","variant","Brand","Nav","NavDropdown","title","id","className","Item","href","target","Divider","App","state","fetch","then","res","json","data","setState","catch","console","log","this","Component","api","axios","create","baseURL","Pais","Mundo","props","match","params","get","responsePais","responseMundo","deaths","recovered","critical","tab","dataAtual","Date","horas","getHours","minutos","getMinutes","dia","getDate","mes","getMonth","ano","getFullYear","Tabela","response","Routes","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5c96271a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nconst Corona = ({coronas})=>{\n\n  coronas = coronas.sort(\n\n    function(a,b)\n    {\n        return b.cases-a.cases;\n    }\n\n  )\n\n\n  return(\n            <>\n\n\n                <div class=\"container\">\n              <h1>Casos COVID-19 no Mundo</h1>\n              <small>Ordem por quantidade de infectados no momento.</small>\n               <p>Para visualizar em tabela, <Link to={`/Tabela`} > clique aqui</Link></p>\n               </div>\n          \n            <div class=\"container-fluid\">\n          \n                  \n            <div class=\"row justify-content-center \"  >\n\n               \n              \n\n            {coronas\n                .map((corona)=>(\n                                     \n                   \n                    <div class=\"card\"  >\n \n                    <Link to={`/Pais/${corona.country}`} > <img src={corona.countryInfo.flag} class=\"card-img-top\" />  </Link>\n                   \n                        <div class=\"card-body\"  >\n                        <h3 class=\"card-title\">{corona.country}</h3>\n                        <p class=\"card-text\"><b>Infectados no momento:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(corona.active)} </p>\n                      \n\n                            <ul class=\"list-group list-group-flush\">\n                          \n                            <li class=\"list-group-item\"><b>Óbitos hoje: </b>{Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(corona.todayDeaths)}</li>\n                         \n                            <li class=\"list-group-item\"><b>Qtde testes realizados: </b>{Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(corona.tests)}</li>\n                            \n                            <li class=\"list-group-item\"><b>Total Diagnosticados: </b>{Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(corona.cases)}</li>\n                            </ul>\n\n                            </div>\n\n                        <div class=\"card-footer\">\n                        <small class=\"text-muted\">Atualização de 10 em 10 minutos</small>\n                      </div>\n                    \n                              {/*}\n                                \n                                {corona.deaths}\n                                {corona.recovered}\n                                \n                                \n                                {corona.todayCases}\n                                {corona.todayDeaths}\n                                {corona.critical}\n                                  \n                */}\n                       </div>\n                ))}\n\n                </div>\n             \n                </div>\n        \n                     \n              </>  \n           \n    )\n}\n\nexport default Corona;\n\n\n\n\n\n\n\n\n\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React from 'react';\nimport { Nav, Navbar } from 'react-bootstrap';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\n\nconst NavBar = () => {\n  return (\n\n\n    <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand >Pandemia</Navbar.Brand>\n\n    <Nav >\n    <NavDropdown title=\"Links Úteis\" id=\"collasible-nav-dropdown\" className=\"mr-sm-2\">\n        <NavDropdown.Item href=\"https://www.bing.com/covid\" target=\"_blank\">Rastreador Bing</NavDropdown.Item>\n        <NavDropdown.Item href=\"https://experience.arcgis.com/experience/38efc69787a346959c931568bd9e2cc4\"  target=\"_blank\">Casos por Bairro/Rio de Janeiro</NavDropdown.Item>\n        <NavDropdown.Item href=\"https://www.worldometers.info/coronavirus/\"  target=\"_blank\">WorldOMeters</NavDropdown.Item>\n        <NavDropdown.Divider />\n        <NavDropdown.Item href=\"http://covid19br.org/\"  target=\"_blank\">Painel UFBA</NavDropdown.Item>\n        <NavDropdown.Item  href=\"https://github.com/raulc27/react-app-corona-virus-simples\" target=\"_blank\">GitHub desta App</NavDropdown.Item>\n        <NavDropdown.Divider />\n\n      </NavDropdown>\n    </Nav>\n\n\n    <Nav>\n          \n    </Nav>\n   \n \n  </Navbar>\n  \n\n\n\n\n  );\n};\n\n\nexport default NavBar;","import React, {Component} from 'react';\nimport Corona from './components/corona';\nimport NavBar from './components/NavBar';\n\n\nimport \"./buttonStyles.css\";\n\nclass App extends Component{\n\n  state={\n      coronas:[]\n  }\n\n  componentDidMount(){\n    fetch('https://corona.lmao.ninja/v2/countries')\n    .then(res=>res.json())\n    .then((data)=>{\n      this.setState({coronas:data})\n    })\n    .catch(console.log)\n  }\n\n\n\n  render(){\n    return(\n      //jsx..\n      <div>\n      <NavBar />\n      <Corona coronas={this.state.coronas} />\n     \n    \n\n\n      </div>\n    );\n  }\n}\n\nexport default App;","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://corona.lmao.ninja'\n});\n\n\nexport default api;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport api from '../services/api';\nimport NavBar from './NavBar';\n\nexport default class Pais extends Component {\n\n// state \"gambiarra\"!!!!\n    state={\n        Pais:{\n\n              \"countryInfo\": {\n                \"_id\":\"\",\n                \"iso2\":\"\",\n                \"iso3\":\"\",\n                \"lat\": \"\",\n                \"long\":\"\",\n                \"flag\":\"\" \n              }\n   \n        \n        }\n        \n        ,     \n        \n        Mundo:{}\n    }\n\n    async componentDidMount(){\n\n\n        const {id}=this.props.match.params;\n\n        const responsePais = await api.get(`/v2/countries/${id}`);\n        const responseMundo = await api.get('/v2/all');\n\n        //console.log(responsePais.data);\n\n        this.setState({Pais: responsePais.data});\n        this.setState({Mundo: responseMundo.data});\n\n        \n\n        \n     \n\n    }\n  \n\n\n    render(){\n\n        const {Pais, Mundo}=this.state;\n        //if(!Pais) return null;\n        //if(!Mundo) return null;\n\n\n       \n\n        return(\n         \n         \n        \n          <>\n          <NavBar/>\n          <div class=\"jumbotron jumbotron-fluid\" >\n              <div class=\"container\">\n                \n                <h1 class=\"display-4\"> <img src={Pais.countryInfo.flag} class=\"img img-fluid\"  />&nbsp;\"{Pais.country}\" </h1>\n           \n                <p class=\"lead mt-3\">Comparando dados <b>COVID-19</b> de <b>\"{Pais.country}\"</b> com o mundo.</p>\n                <p>Esta <b>app</b> consulta uma api internacional e muitos nomes/dados não estão no formato <b>pt-br</b>.</p>\n                <p class=\"d-sm-none\">Para uma comparação detalhada, consulte em uma tela desktop</p>\n              </div>\n          </div>\n            \n\n          <div class=\"container\">\n\n          <div class=\"card-deck\">\n\n              <div class=\"card d-none d-sm-block bg-light\">\n              {/*  <img class=\"card-img-top\" src={Pais.countryInfo.flag} alt='Dados Mundiais' /> */}\n              <div class=\"card-header\">\n                    <h5 class=\"card-title\">{Pais.country}</h5>\n                    <p class=\"card-text\"></p>\n                  </div>\n          \n          \n                <div class=\"card-body\">\n                \n                  <ul class=\"list-group list-group-flush\">\n                  <li class=\"list-group-item\"></li>\n                  <li class=\"list-group-item\"><b>Diagnosticados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Pais.cases)}</li>\n                  <li class=\"list-group-item\"><b>Mortes:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Pais.deaths)}</li>\n                  <li class=\"list-group-item\"><b>Recuperados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Pais.recovered)}</li>\n                  <li class=\"list-group-item\"><b>Infectados no momento:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Pais.active)}</li>\n                  <li class=\"list-group-item\"><b>Estado Crítico:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Pais.critical)}</li>\n              </ul>\n              \n                  <p class=\"card-text\"><small class=\"text-muted\">Update de 10 em 10min</small></p>\n                </div>\n            \n            </div>\n\n            <div class=\"card d-none d-sm-block bg-light\" >\n            {/* <img class=\"card-img-top\" src='' alt='Dados Mundiais' /> */}\n\n            <div class=\"card-header\">            \n                <h5 class=\"card-title\">Mundo</h5>\n                <p class=\"card-text\"></p>\n              </div>\n\n            <div class=\"card-body\">\n                     \n\n                         \n              <ul class=\"list-group list-group-flush\">\n                <li class=\"list-group-item\"></li>\n                <li class=\"list-group-item\"><b>Diagnosticados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Mundo.cases)}</li>\n                <li class=\"list-group-item\"><b>Mortes:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Mundo.deaths)}</li>\n                <li class=\"list-group-item\"><b>Recuperados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Mundo.recovered)}</li>\n                <li class=\"list-group-item\"><b>Infectados no Momento:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Mundo.active)}</li>\n                <li class=\"list-group-item\"><b>Estado Cŕitico:</b> {Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(Mundo.critical)}</li>\n            </ul>\n\n\n\n              <p class=\"card-text\"><small class=\"text-muted\">Update de 10 em 10min</small></p>\n            </div>\n        \n        </div>\n\n\n\n\n        <div class=\"card bg-light\" >\n        {/* <img class=\"card-img-top\" src='' alt='Dados Mundiais' /> */}\n        \n        <div class=\"card-header\">\n            <h5 class=\"card-title\">\"{Pais.country}\" em relação ao Mundo</h5>\n            <p class=\"card-text\"></p>\n          </div>\n          \n\n        <div class=\"card-body\">\n\n          \n                     \n          <ul class=\"list-group list-group-flush\">\n            <li class=\"list-group-item\"></li>\n            <li class=\"list-group-item\"><b>Diagnosticados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.cases/Mundo.cases)}</li>\n            <li class=\"list-group-item\"><b>Mortes:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.deaths/Mundo.deaths)}</li>\n            <li class=\"list-group-item\"><b>Recuperados:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.recovered/Mundo.recovered)}</li>\n            <li class=\"list-group-item\"><b>Infectados no Momento:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.active/Mundo.active)}</li>\n            <li class=\"list-group-item\"><b>Estado Cŕitico:</b> {Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(Pais.critical/Mundo.critical)}</li>\n        </ul>\n\n\n\n          <p class=\"card-text\"><small class=\"text-muted\">Update de 10 em 10min</small></p>\n        </div>\n    \n    </div>\n\n            \n\n          </div>\n          \n           \n          <Link to={`/`} ><button class=\"btn btn-dark input-lg mt-5 mb-1\" > <b>Voltar para página inicial</b> </button>  </Link>\n\n\n       \n          </div>\n\n          \n\n          </>\n\n\n\n          \n\n         \n          \n   \n         \n        );\n\n    }\n\n\n\n\n}\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport NavBar from './NavBar';\n\n\n\nconst tab = ({coronas})=>{ \n    \n    \n    coronas = coronas.sort(\n        function(a,b){\n            return b.todayDeaths-a.todayDeaths;\n        }\n    )\n\n\n    const dataAtual = new Date();\n    const horas = dataAtual.getHours();\n    const minutos = dataAtual.getMinutes();\n\n      const dia = dataAtual.getDate();\n    const mes = dataAtual.getMonth()+1;\n    const ano = dataAtual.getFullYear();\n\n    //const horaCerta=horas+\"h\"+minutos;\n\n\n\n    return(\n\n      \n        <div >\n          <NavBar/>\n      <center><h1>Óbitos por COVID-19</h1>\n      <p>Ordenando por fatos ocorridos desde 00h de hoje <b>({dia+\" / \"+mes+\" / \"+ano})</b></p>\n    \n    <p class=\"small\">O seu horário no momento: <b>{horas}h</b> e {minutos} minutos </p>\n       \n    \n      <p>clique no nome do país para um resumo</p>\n      </center>\n    \n      <div class=\"container\">\n         \n          <table class=\"table   table-striped table-hover table-responsive-xs table-sm table-wrapper-scroll-y\">\n          <thead>\n              <tr>\n                 {/*  <th>Bandeira</th> */}\n                 <th  >País</th> \n                 <th  >Óbitos hoje</th> \n\n\n                  <th >Em estado crítico</th>\n                  {/*      <th  >Mortes</th> */}\n                  {/*   <th  >Recuperados</th> */}\n                  <th>Letalidade</th>\n                  <th>Recuperação</th>\n                  {/*    <th  >Diag. hoje</th> */}\n                  {/*   <th  >Estado crítico</th>       */}            \n              </tr>\n          </thead>\n\n          <tbody>\n\n      {coronas\n          .map((corona)=>(\n            \n              \n                      <tr>  \n                    {/*}      <td><Link to={`/Pais/${corona.country}`} ><img src={corona.countryInfo.flag} class=\"image img-responsive img-rounded img-thumbnail\" width=\"33%\" /></Link></td> */}\n                          <td  ><Link to={`/Pais/${corona.country}`} ><b>{corona.country}</b></Link></td> \n                          <td  >{corona.todayDeaths}</td> \n\n                          <td >{Intl.NumberFormat(\"pt-BR\",{style:'decimal'}).format(corona.critical)}</td>\n                     {/*     <td  >{corona.deaths}</td> */}\n                     {/*     <td  >{corona.recovered}</td> */}\n                          <td>{Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(corona.deaths/(corona.cases-corona.active))}</td>\n                          <td>{Intl.NumberFormat(\"pt-BR\",{style:'percent'}).format(corona.recovered/(corona.cases-corona.deaths))}</td>\n                     {/*     <td  >{corona.todayCases}</td> */}\n                      {/*    <td  >{corona.critical}</td> */}\n                         \n                          \n                      </tr>\n\n            \n\n\n       \n          ))}\n          </tbody>\n\n          <tfoot>\n              <tr>\n                  \n                 {/*} <th>Bandeira</th> */}\n                  <th  >País</th> \n                  <th  >Mortes últimas 24h</th> \n\n                  <th >Diagnosticados</th>\n               {/*   <th  >Mortes</th> */}\n               {/*   <th  >Recuperados</th> */}\n                  <th>Letalidade</th>\n                  <th>Recuperação</th>\n                {/* <th  >Diag. hoje</th> */}\n                {/*  <th  >Estado crítico</th> */}\n                \n\n\n\n              </tr>\n          </tfoot>\n    </table>\n  </div>\n        \n  </div>\n\n    )\n\n}\n\nexport default tab;\n\n","import '../buttonStyles.css';\n\nimport React, { Component } from 'react';\n\nimport api from '../services/api';\nimport Tab from './tab';\n\n\n\n\nclass Tabela extends Component{\n\n  state={\n    coronas:[]\n  }\n  \n/*\n\n  componentDidMount(){\n    fetch('https://corona.lmao.ninja/v2/countries')\n    .then(res=>res.json())\n    .then((data)=>{\n      this.setState({coronas:data})\n    })\n    .catch(console.log)\n  }\n*/\n\nasync componentDidMount(){\n\n\tconst response = await api.get('/v2/countries');\n\n\tthis.setState({coronas: response.data});\n\n}\n\n\n  render(){\n    return(\n      //jsx..\n      \n\t  <div>\n     \n      <Tab coronas={this.state.coronas} />\n\t  </div>\n\t\t\n\n\n     \n    );\n  }\n}\n\nexport default Tabela;\n","import React from 'react';\nimport {BrowserRouter,Switch,Route} from 'react-router-dom';\n\nimport App from './App';\nimport Pais from './components/Pais';\nimport Tabela from './components/Tabela';\n\n\n\nconst Routes = () => (\n\n    <BrowserRouter basename=\"react-app-corona-virus-simples\"  >\n        <Switch>\n        \n            <Route exact path=\"/\" component={App} />\n            <Route path=\"/Pais/:id\" component={Pais} />\n            <Route path=\"/Tabela\" component={Tabela} />\n        </Switch>\n    </BrowserRouter>\n\n);\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\n{/*\n\n\n    ReactDOM.render(<App />, document.getElementById('root'));\n\n\n*/}\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}